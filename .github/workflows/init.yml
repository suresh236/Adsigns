name: Initialize
on: 
  workflow_call:
    inputs:
      WorkflowConfigFile:
        required: true
        type: string
    outputs:
      IncludedBranchName:
        description: "Branch name template that we want to include."
        value: ${{ jobs.read-configuration.outputs.BranchName }}
      ProjectPath:
        description: "Project path."
        value: ${{ jobs.read-configuration.outputs.ProjectPath }}
      DotnetVersion:
        description: "Dotnet Version."
        value: ${{ jobs.read-configuration.outputs.DotnetVersion }}
      ProjectName:
        description: "Project Name."
        value: ${{ jobs.read-configuration.outputs.ProjectName }}     
      BuildConfiguration:
        description: " BuildConfiguration."
        value: ${{ jobs.read-configuration.outputs.BuildConfiguration }}


jobs:
  read-configuration:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

# Reading and initializing from env.vars
      - name: Read env.vars file
        id: vars
        uses: juliangruber/read-file-action@v1
        with:
          path: ./env.vars
      - name: Echo env.vars
        run: echo "${{ steps.vars.outputs.content }}"
      - name: Assign to Env variable
        run: echo "${{ steps.vars.outputs.content }}" >> $GITHUB_ENV
      - name: Read from Env variable
        run: echo "${{ env.included_branch }}"
      - name: Set output ENV
        id: set-output-env
        run: echo "::set-output name=BranchName::${{ env.included_branch }}"

# Reading and initializing from workflow.conf
      - name: Read workflow.conf file
        id: conf
        uses: juliangruber/read-file-action@v1
        with:
          path: ${{ inputs.WorkflowConfigFile }}
      - name: Echo workflow.conf
        run: echo "${{ steps.conf.outputs.content }}"

      - name: Assign to Env variable
        run: echo "${{ steps.conf.outputs.content }}" >> $GITHUB_ENV

      - name: Set output PROJECT_PATH
        id: set-output-ProjectPath
        run: echo "::set-output name=ProjectPath::${{ env.PROJECT_PATH }}"

      - name: Set output DOTNET_VERSION
        id: set-output-DotnetVersion
        run: echo "::set-output name=DotnetVersion::${{ env.DOTNET_VERSION }}"
        
      - name: Set output PROJECT_NAME
        id: set-output-ProjectName
        run: echo "::set-output name=ProjectName::${{ env.PROJECT_NAME }}"
          
      - name: Set output CONFIGURATION
        id: set-output-BuildConfiguration
        run: echo "::set-output name=BuildConfiguration::${{ env.CONFIGURATION }}"

# Defining outputs           
    outputs:
      BranchName: ${{ steps.set-output-env.outputs.BranchName }}
      ProjectPath: ${{ steps.set-output-ProjectPath.outputs.ProjectPath }}
      DotnetVersion: ${{ steps.set-output-DotnetVersion.outputs.DotnetVersion }} 
      ProjectName: ${{ steps.set-output-ProjectName.outputs.ProjectName }}
      BuildConfiguration: ${{ steps.set-output-BuildConfiguration.outputs.BuildConfiguration }}